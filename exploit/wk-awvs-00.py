# -*- coding:utf-8 -*- 
#!/usr/bin/env python3
#Description: wukong exploit 
#Author:      Bing
#Email:       amzing_bing@outlook.com
#DateTime:    2017-05-10 23:08:39

import sys
sys.path.append("..")

from exploit.module.example import WKExploit
from exploit.module.req import *

import http.client,json
from datetime import datetime
from time import gmtime, strftime
from xml.dom import minidom
import zipfile,cgi,time,os


class Exploit(WKExploit) :
    def __init__(self, args) :
        '''
        漏洞信息和测试参数
        '''
        self.api_url = awvs_url
        self.api_port = awvs_port
        self.api_header = awvs_header
        self.filter = report_filters
        self.report_save_dir = report_save_dir

        self.info = {
            # 输入参数
            "protorl" : self.parameter(args["protorl"],"http://"),
            "host" : self.parameter(args["host"], ""), 
            "port" : self.parameter(args["port"], 80),
            "cookie" : self.parameter(args["cookie"], "test"),
            "fuzzing" : "",
        }

        self.result = {
            # 结果信息
            "status" : False,
            "data" : [{
                "bug_name" : "端口扫描",
                "bug_author" : "Bing",
                "bug_level" : self.level.normal,
                "bug_type" : self.category.other,
                "bug_ref" : "",
                "bug_desc" : "",
                "bug_result" : [],
                "bug_repair" : ""
            }],
        }


    def parse_xml(self,file_name):
        '''
        扫描结果数据解析
        '''
        root = minidom.parse(file_name).documentElement
        ReportItem_list =  root.getElementsByTagName('ReportItem')

        if ReportItem_list:
            for node in ReportItem_list:
                color = node.getAttribute("color")
                name = node.getElementsByTagName("Name")[0].firstChild.data
                try:
                    if color in self.filter['awvs_white_list'] and name not in self.filter['bug_black_list']:
                        temp = {}
                        temp['bug_name'] = '{0}'.format(name)
                        temp["bug_author"] = "bing" 

                        temp['bug_ref'] = ''
                        temp['bug_desc'] = '{0}'.format(cgi.escape(node.getElementsByTagName("Details")[0].firstChild.data))
                        temp['bug_level'] = '{0}'.format(node.getElementsByTagName("Severity")[0].firstChild.data.lower())

                        affect = '{0}'.format(node.getElementsByTagName("Affects")[0].firstChild.data)

                        try:
                            request = '{0}'.format(cgi.escape(node.getElementsByTagName("Request")[0].firstChild.data))
                        except:
                            request = ""

                        try:
                            response = '{0}'.format(cgi.escape(node.getElementsByTagName("Response")[0].firstChild.data))
                        except:
                            response = ""

                        test = "Vulnerability link : " + affect + "\n Detail : \n" + request + "\n"+ response
                        txt = test.replace('\n','<br/>')
                        temp['bug_result'] = [txt]
                        temp['bug_repair'] = '{0}'.format(cgi.escape(node.getElementsByTagName("Recommendation")[0].firstChild.data))
                        temp["bug_type"] = "awvs" 
                        self.result["status"] = True 
                        self.result["data"].append(temp)
                except:
                    pass

            result = {"status":1}
            return result
        else:
            result = {"status":0}
            return result


    def download(self,path_file,data):
        '''
        下载报告成zip
        '''
        try:
            with open("{0}".format(path_file), "wb") as code:     
                code.write(data)
                code.close()
            return {"status":1,"data":path_file}
        except:
            return {"status":0}


    def unzip_dir(self,unzipfilename, savexmlfile):
        '''
        解压报告
        '''
        result = ""
        try:
            srcZip = zipfile.ZipFile(unzipfilename, "r")
            for eachfile in srcZip.namelist():
                if eachfile.endswith(".xml",3):
                    fd=open(savexmlfile, "wb")
                    result = savexmlfile
                    fd.write(srcZip.read(eachfile))
                    fd.close()
            srcZip.close()
            return {"status":1,"data":result}
        except:
            return {"status":0}


    def awvs_add_task(self):
        '''
        增加任务
        '''
        target = self.info["protorl"] + self.info["host"] + ":" + str(self.info["port"])
        days_time = ""
        days = strftime("%m/%d/%Y", gmtime())
        if int(datetime.now().minute) == 58 or int(datetime.now().minute) == 59 :
            if datetime.now().hour == 23 :
                days_time = (0, 3)
                days = str(datetime.now().month) + "/" + str(datetime.now().day+1) + "/" + str(datetime.now().year)
            else:
                days_time = (datetime.now().hour+1, 3)
                days = str(datetime.now().month) + "/" + str(datetime.now().day) + "/" + str(datetime.now().year)   
        else:
            days_time = (datetime.now().hour, datetime.now().minute+3)

        if target == False :
            return { "status" : 2 , "data" : "AWVS >>>> format error" }

        ACUDATA = {"scanType":"scan",
                   "targetList":"",
                   "target":["%s" % target],
                   "recurse":"-1",
                   "date": days,
                   "dayOfWeek":"1",
                   "dayOfMonth":"1",
                   "time": "%s:%s" % days_time,
                   "deleteAfterCompletion":"False",
                   "params":{
                            "profile":"Default",
                             "loginSeq":str(self.info["cookie"]),
                             "settings":"Default",
                             "scanningmode":"extensive",
                             "excludedhours":"<none>",
                             "savetodatabase":"False",
                             "savelogs":"False",
                             "ExportXML":"export.xml",
                             "emailaddress":""
                            }
                   }

        try:
            conn = http.client.HTTPConnection(self.api_url, self.api_port)
            conn.request("POST", "/api/addScan", json.dumps(ACUDATA) , self.api_header)
            resp = conn.getresponse()
            content = resp.read()
        except:
            return {"status":2}

        result = json.loads(content)
        status = result["result"]
        if status == "OK":
            taskid = result["data"][0]
            return {"status":1,"data":taskid}
        else:
            return {"status":0}


    def awvs_process_status(self,taskid):
        '''
        查看任务进程
        '''
        task_process = ""
        try:
            conn_p = http.client.HTTPConnection(self.api_url, self.api_port)
            data = json.dumps({'id': str(taskid)})
            conn_p.request("POST", "/api/getScanHistory", data, self.api_header)
            resp2 = conn_p.getresponse()
            awvs_process_content = resp2.read().decode()
            if eval(awvs_process_content)["result"] == "FAIL" :
                return {"status":2}

            conn = http.client.HTTPConnection(self.api_url, self.api_port)
            conn.request("GET", "/api/listScans", headers=self.api_header)
            resp = conn.getresponse()
            awvs_list_content = resp.read()

        except:
            return {"status":2}

        awvs_process_result = json.loads(awvs_process_content)
        awvs_list_result = json.loads(awvs_list_content)
        
        status = awvs_process_result["result"]
        list_status = awvs_list_result["result"]
        if status == "OK" and len(awvs_process_result["data"]) > 0 :
            process = awvs_process_result["data"][-1]["msg"]
            if "Scan finished" in process:
                return {"status":1,"data":100}

            if list_status == "OK":
                for i in awvs_list_result["data"]["scans"] :
                    task_id = i["id"]
                    if str(task_id) == str(taskid):
                        task_process =  i["progress"]
                return {"status":1,"data":task_process}
        else:
            return {"status":0}


    def awvs_report_task(self, domain ,awvsid):
        '''
        下载报告
        '''
        save_dir = self.report_save_dir
        try:
            conn = http.client.HTTPConnection(self.api_url, self.api_port)
            data = json.dumps({"id":str(awvsid)})
            conn.request("POST", "/api/getScanResults", data , self.api_header)
            resp = conn.getresponse()
            content = resp.read()
        except:
            return {"status":2}

        result = json.loads(content)
        status = result["result"]
        try:
            result_len = len(result["data"][0])
        except:
            result_len = 2

        if status == "OK" and result_len == 3:
            report_id = result["data"][0]["id"] 
            conn.request("GET", "/api/download/{0}:{1}".format(awvsid, report_id), headers=self.api_header)
            resp = conn.getresponse()
            download_contents = resp.read()

            #save report file
            zipfilename = "{0}/{1}_awvs.zip".format(str(save_dir),str(domain))
            xmlfilename = "{0}/{1}_awvs.xml".format(str(save_dir),str(domain))

            download_file = self.download(path_file=zipfilename,data=download_contents)
            if download_file['status'] == 1:
                xml_filename = self.unzip_dir(unzipfilename=zipfilename,savexmlfile=xmlfilename)
                if xml_filename["status"] == 1:
                    os.remove(zipfilename)
                    xml_data = self.parse_xml(xml_filename["data"])
                    if xml_data['status'] == 1:
                        os.remove(xmlfilename)
                        return {"status" : 1}
                    else:
                        return {"status" : 2}
            else:
                return {"status":2}
        else:
            return {"status":0}

    def check(self, txt):
        '''
        执行任务
        '''
        result = self.awvs_add_task()
        status = result["status"]
        if status == 1 :
            awvs_id = int(result["data"])  
            while True:
                time.sleep(10)
                awvs_process = self.awvs_process_status(awvs_id)
                awvs_status = awvs_process["status"]
                if awvs_status == 1 :
                    awvs_process_data = awvs_process["data"]
                    if awvs_process_data == 100 :
                        time.sleep(50)       #delay 50s ,get report; because it takes time to generate a report
                        awvs_report = self.awvs_report_task(self.info["host"], awvs_id) 
                        break
                elif awvs_status == 2 :
                    break
            return
        else :
            return

